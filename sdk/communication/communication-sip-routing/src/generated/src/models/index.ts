/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Represents a SIP configuration.
 * When a call is being routed the routes are applied in the same order as in the routes list.
 * A route is matched by its number pattern.
 * Call is then directed into route's first available trunk, based on the order in the route's trunks list.
 */
export interface SipConfiguration {
  /**
   * SIP trunks for routing calls.
   * Map key is trunk's FQDN (1-249 characters).
   */
  trunks?: { [propertyName: string]: Trunk };
  /**
   * Trunk routes for routing calls.
   */
  routes?: TrunkRoute[];
}

/**
 * Represents a SIP trunk for routing calls. See RFC 4904.
 */
export interface Trunk {
  /**
   * Gets or sets SIP signaling port of the trunk.
   */
  sipSignalingPort: number;
}

/**
 * Represents a trunk route for routing calls.
 */
export interface TrunkRoute {
  /**
   * Gets or sets description of the route.
   */
  description?: string;
  /**
   * Gets or sets name of the route.
   */
  name: string;
  /**
   * Gets or sets regex number pattern for routing calls. .NET regex format is supported.
   * The regex should match only digits with an optional '+' prefix without spaces.
   * I.e. "^\+[1-9][0-9]{3,23}$".
   */
  numberPattern: string;
  /**
   * Gets or sets list of SIP trunks for routing calls. Trunks are represented as FQDN.
   */
  trunks?: string[];
}

/**
 * The Communication Services error.
 */
export interface CommunicationErrorResponse {
  /**
   * The Communication Services error.
   */
  error: CommunicationError;
}

/**
 * The Communication Services error.
 */
export interface CommunicationError {
  /**
   * The error code.
   */
  code: string;
  /**
   * The error message.
   */
  message: string;
  /**
   * The error target.
   */
  readonly target?: string;
  /**
   * Further details about specific errors that led to this error.
   */
  readonly details?: CommunicationError[];
  /**
   * The inner error if any.
   */
  readonly innerError?: CommunicationError;
}

/**
 * Represents a SIP configuration patch.
 */
export interface SipConfigurationPatch {
  /**
   * SIP trunks for routing calls.
   * Map key is trunk's FQDN (1-249 characters).
   */
  trunks?: { [propertyName: string]: TrunkPatch };
  /**
   * Trunk routes for routing calls.
   */
  routes?: TrunkRoute[];
}

/**
 * Represents a SIP trunk patch.
 */
export interface TrunkPatch {
  /**
   * Gets or sets SIP signaling port of the trunk.
   */
  sipSignalingPort?: number;
}

/**
 * Contains response data for the getSipConfiguration operation.
 */
export type AzureCommunicationSIPRoutingServiceGetSipConfigurationResponse = SipConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SipConfiguration;
  };
};

/**
 * Optional parameters.
 */
export interface AzureCommunicationSIPRoutingServicePatchSipConfigurationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Configuration patch.
   */
  body?: SipConfigurationPatch;
}

/**
 * Contains response data for the patchSipConfiguration operation.
 */
export type AzureCommunicationSIPRoutingServicePatchSipConfigurationResponse = SipConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SipConfiguration;
  };
};

/**
 * Optional parameters.
 */
export interface AzureCommunicationSIPRoutingServiceOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
